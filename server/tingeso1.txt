{
    "id": 539069176,
    "tree_sha": "5474a87eb745878fdf1333556102eaf62d5c3b13",
    "name": "tingeso-ev1",
    "owner": "ibanezbendezu",
    "content": [
        {
            "path": ".gitignore",
            "content": "HELP.md\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n!**/src/main/**/target/\n!**/src/test/**/target/\n\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\nbuild/\n!**/src/main/**/build/\n!**/src/test/**/build/\n\n### VS Code ###\n.vscode/\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/MueblesstgoApplication.java",
            "content": "package cl.tingeso.mueblesstgo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MueblesstgoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MueblesstgoApplication.class, args);\n\t}\n\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/ApprovalController.java",
            "content": "package cl.tingeso.mueblesstgo.controllers;\n\nimport cl.tingeso.mueblesstgo.entities.ApprovalEntity;\nimport cl.tingeso.mueblesstgo.services.ApprovalService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\n\n@Controller\n@RequestMapping(\"approval\")\npublic class ApprovalController {\n\n    private final ApprovalService approvalService;\n\n    public ApprovalController(ApprovalService approvalService) {\n        this.approvalService = approvalService;\n    }\n\n    @GetMapping\n    public String approvalForm(Model model) {\n        model.addAttribute(\"approval\", new ApprovalEntity());\n        return \"pages/provide-approval\";\n    }\n\n    @PostMapping\n    public String approvalSubmit(@ModelAttribute ApprovalEntity approval, @RequestParam(\"rut\") String rut, Model model) {\n        try {\n            model.addAttribute(\"approval\", approvalService.saveApproval(approval, rut));\n            return \"pages/approval-result\";\n        } catch (Exception e) {\n            model.addAttribute(\"approval\", approval);\n            model.addAttribute(\"error\", \"El rut ingresado no existe.\");\n            return \"pages/provide-approval\";\n        }\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/ClockController.java",
            "content": "package cl.tingeso.mueblesstgo.controllers;\n\nimport cl.tingeso.mueblesstgo.services.ClockService;\nimport cl.tingeso.mueblesstgo.services.HRMService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\n@Controller\npublic class ClockController {\n\n    private final ClockService clockService;\n    private final HRMService hrmService;\n\n    public ClockController(ClockService clockService, HRMService hrmService) {\n        this.clockService = clockService;\n        this.hrmService = hrmService;\n    }\n\n    @GetMapping(\"/upload-clock\")\n    public String upload() {\n        return \"pages/upload-clock\";\n    }\n\n    @PostMapping(\"/save-clock\")\n    public String save(@RequestParam(\"file\") MultipartFile file, RedirectAttributes ms){\n        if (this.clockService.loadClock(file)) {\n            try {\n                this.hrmService.generateWages();\n                ms.addFlashAttribute(\"success\", \"Reloj cargado correctamente.\");\n                return \"redirect:upload-clock\";\n            } catch (Exception e) {\n                ms.addFlashAttribute(\"error\", \"Error al guardar el archivo.\");\n                return \"redirect:upload-clock\";\n            }\n        } else {\n            ms.addFlashAttribute(\"error\", \"El archivo no posee el nombre correcto.\");\n            return \"redirect:upload-clock\";\n        }\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/EmployeeController.java",
            "content": "package cl.tingeso.mueblesstgo.controllers;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n\n@Controller\n@RequestMapping\npublic class EmployeeController {\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/HomeController.java",
            "content": "package cl.tingeso.mueblesstgo.controllers;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n\n    @GetMapping\n    public String getHome() {\n        return \"pages/home\";\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/JustificationController.java",
            "content": "package cl.tingeso.mueblesstgo.controllers;\n\nimport cl.tingeso.mueblesstgo.entities.JustificationEntity;\nimport cl.tingeso.mueblesstgo.services.JustificationService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\n\n@Controller\n@RequestMapping(\"justification\")\npublic class JustificationController {\n\n    private final JustificationService justificationService;\n\n    public JustificationController(JustificationService justificationService) {\n        this.justificationService = justificationService;\n    }\n\n    @GetMapping\n    public String justificationForm(Model model) {\n        model.addAttribute(\"justification\", new JustificationEntity());\n        return \"pages/provide-justification\";\n    }\n\n    @PostMapping\n    public String justificationSubmit(@ModelAttribute JustificationEntity justification, @RequestParam(\"rut\") String rut, Model model) {\n        try {\n            model.addAttribute(\"justification\", justificationService.saveJustification(justification, rut));\n            return \"pages/justification-result\";\n        } catch (Exception e) {\n            model.addAttribute(\"justification\", justification);\n            model.addAttribute(\"error\", \"El rut ingresado no existe.\");\n            return \"pages/provide-justification\";\n        }\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/WageController.java",

            "content": "package cl.tingeso.mueblesstgo.controllers;\n\nimport cl.tingeso.mueblesstgo.controllers.model.WageVo;\nimport cl.tingeso.mueblesstgo.services.WageService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@Controller\n@RequestMapping(\"wage\")\npublic class WageController {\n\n    private final WageService wageService;\n\n    public WageController(WageService wageService) {\n        this.wageService = wageService;\n    }\n\n    @GetMapping(\"{id}\")\n    public String showById(@PathVariable Long id, Model model){\n        model.addAttribute(\"wage\", wageService.getById(id, Boolean.TRUE));\n        return \"pages/wage\";\n    }\n\n    @GetMapping\n    public String showWages(Model model) {\n        try {\n            List<WageVo> wages = wageService.getWages();\n            model.addAttribute(\"wages\", wages);\n            model.addAttribute(\"void\", false);\n            return \"pages/wages\";\n        } catch (Exception e) {\n            model.addAttribute(\"void\", true);\n            return \"pages/wages\";\n        }\n    }\n\n    @GetMapping(\"/search\")\n    public String getWageSearch() { return \"pages/search-wage\"; }\n\n    @GetMapping(\"/find\")\n    public String searchByRutAndDate(@RequestParam(\"rut\") String rut,\n                                     @RequestParam(\"month\") String month, Model model) {\n        try {\n            Long id = wageService.findByEmployeeIdAndDate(rut, month);\n            return \"redirect:\" + id;\n        } catch (Exception e) {\n            model.addAttribute(\"error\", \"El sueldo buscado no se encuentra registrado.\");\n            return \"pages/search-wage\";\n        }\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/model/EmployeeVo.java",
            "content": "package cl.tingeso.mueblesstgo.controllers.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class EmployeeVo {\n    private Long id;\n    private String name;\n    private String rut;\n    private Integer serviceYears;\n    private Character category;\n    private Long fixedMonthlyWage;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/model/WageDetailVo.java",
            "content": "package cl.tingeso.mueblesstgo.controllers.model;\n\nimport cl.tingeso.mueblesstgo.entities.enums.DetailType;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.math.BigDecimal;\n\n@Getter\n@Setter\npublic class WageDetailVo {\n    private Long id;\n    private String name;\n    private DetailType type;\n    private BigDecimal amount;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/controllers/model/WageVo.java",
            "content": "package cl.tingeso.mueblesstgo.controllers.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Getter\n@Setter\npublic class WageVo {\n    private Long id;\n    private LocalDate date;\n    private List<WageDetailVo> detail;\n    private EmployeeVo employee;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/ApprovalEntity.java",
            "content": "package cl.tingeso.mueblesstgo.entities;\n\nimport lombok.*;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport javax.persistence.*;\nimport java.time.LocalDate;\n\n@Entity\n@Table(name = \"overtime_approval\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n\npublic class ApprovalEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(unique = true, nullable = false)\n    private Long id;\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n    private LocalDate approvalDate;\n\n    private String details;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"employee_id\", nullable = false)\n    private EmployeeEntity employee;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/CategoryEntity.java",
            "content": "package cl.tingeso.mueblesstgo.entities;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"category\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n\npublic class CategoryEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(unique = true, nullable = false)\n    private Long id;\n\n    private Character type;\n    private Long fixedMonthlyWage;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/EmployeeEntity.java",
            "content": "package cl.tingeso.mueblesstgo.entities;\n\nimport lombok.*;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport javax.persistence.*;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Table(name = \"employee\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n\npublic class EmployeeEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(unique = true, nullable = false)\n    private Long id;\n\n    private String rut;\n    private String lastNames;\n    private String firstNames;\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n    private LocalDate birthDate;\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n    private LocalDate hireDate;\n\n    @OneToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"category_id\", nullable = false)\n    private CategoryEntity category;\n\n    @OneToMany(mappedBy = \"employee\", fetch = FetchType.LAZY)\n    private List<WorkedDayEntity> workedDays;\n\n    @OneToMany(mappedBy = \"employee\", fetch = FetchType.LAZY)\n    private List<JustificationEntity> absenceJustification;\n\n    @OneToMany(mappedBy = \"employee\", fetch = FetchType.LAZY)\n    private List<ApprovalEntity> overtimeApproval;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/JustificationEntity.java",
            "content": "package cl.tingeso.mueblesstgo.entities;\n\nimport lombok.*;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport javax.persistence.*;\nimport java.time.LocalDate;\n\n@Entity\n@Table(name = \"absence_justification\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n\npublic class JustificationEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(unique = true, nullable = false)\n    private Long id;\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n    private LocalDate justificationDate;\n\n    private String details;\n    private Boolean status;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"employee_id\", nullable = false)\n    private EmployeeEntity employee;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/WageDetailEntity.java",
            "content": "package cl.tingeso.mueblesstgo.entities;\n\nimport cl.tingeso.mueblesstgo.entities.enums.DetailType;\n\nimport lombok.*;\n\nimport javax.persistence.*;\nimport java.math.BigDecimal;\n\n@Entity\n@Table(name = \"wage_detail\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n\npublic class WageDetailEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(unique = true, nullable = false)\n    private Long id;\n\n    private String name;\n\n    @Enumerated(EnumType.STRING)\n    private DetailType type;\n\n    private BigDecimal amount;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"wage_id\", nullable = false)\n    private WageEntity wage;\n}"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/WageEntity.java",
            "content": "package cl.tingeso.mueblesstgo.entities;\n\nimport lombok.*;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport javax.persistence.*;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Table(name = \"wage\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n\npublic class WageEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(unique = true, nullable = false)\n    private Long id;\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n    private LocalDate date;\n\n    @OneToMany(mappedBy = \"wage\", fetch = FetchType.LAZY)\n    private List<WageDetailEntity> detail;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"employee_id\", nullable = false)\n    private EmployeeEntity employee;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/WorkedDayEntity.java",
            "content": "package cl.tingeso.mueblesstgo.entities;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\n\n@Entity\n@Table(name = \"worked_day\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class WorkedDayEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(unique = true, nullable = false)\n    private Long id;\n\n    private LocalDate date;\n    private LocalTime clockIn;\n    private LocalTime clockOut;\n    private Double overtime;\n    private Long minutesLate;\n\n    @ManyToOne\n    @JoinColumn(name = \"employee_id\")\n    private EmployeeEntity employee;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/WorkingDaysEntity.java",
            "content": "package cl.tingeso.mueblesstgo.entities;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"working_days\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class WorkingDaysEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(unique = true, nullable = false)\n    private Long id;\n\n    private int year;\n    private int month;\n    private int amount;\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/enums/CategoryType.java",
            "content": "package cl.tingeso.mueblesstgo.entities.enums;\n\npublic enum CategoryType {\n    A, B, C\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/entities/enums/DetailType.java",
            "content": "package cl.tingeso.mueblesstgo.entities.enums;\n\npublic enum DetailType {\n    POSITIVE_NI, POSITIVE_I, NEGATIVE_NI, NEGATIVE_I\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/repositories/ApprovalRepository.java",
            "content": "package cl.tingeso.mueblesstgo.repositories;\n\nimport cl.tingeso.mueblesstgo.entities.ApprovalEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ApprovalRepository extends JpaRepository<ApprovalEntity, Long>{\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/repositories/CategoryRepository.java",
            "content": "package cl.tingeso.mueblesstgo.repositories;\n\nimport cl.tingeso.mueblesstgo.entities.CategoryEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CategoryRepository extends JpaRepository<CategoryEntity, Long> {\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/repositories/EmployeeRepository.java",
            "content": "package cl.tingeso.mueblesstgo.repositories;\n\nimport cl.tingeso.mueblesstgo.entities.EmployeeEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface EmployeeRepository extends JpaRepository<EmployeeEntity, Long> {\n\n    Optional<EmployeeEntity> findByRut(String rut);\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/repositories/JustificationRepository.java",
            "content": "package cl.tingeso.mueblesstgo.repositories;\n\nimport cl.tingeso.mueblesstgo.entities.JustificationEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface JustificationRepository extends JpaRepository<JustificationEntity, Long>{\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/repositories/WageDetailRepository.java",
            "content": "package cl.tingeso.mueblesstgo.repositories;\n\nimport cl.tingeso.mueblesstgo.entities.WageDetailEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface WageDetailRepository extends JpaRepository<WageDetailEntity, Long> {\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/repositories/WageRepository.java",
            "content": "package cl.tingeso.mueblesstgo.repositories;\n\nimport cl.tingeso.mueblesstgo.entities.WageEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface WageRepository extends JpaRepository<WageEntity, Long> {\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/repositories/WorkedDayRepository.java",
            "content": "package cl.tingeso.mueblesstgo.repositories;\n\nimport cl.tingeso.mueblesstgo.entities.WorkedDayEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface WorkedDayRepository extends JpaRepository<WorkedDayEntity, Long> {\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/repositories/WorkingDaysRepository.java",
            "content": "package cl.tingeso.mueblesstgo.repositories;\n\nimport cl.tingeso.mueblesstgo.entities.WorkingDaysEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface WorkingDaysRepository extends JpaRepository<WorkingDaysEntity, Long> {\n    WorkingDaysEntity findByMonth(int month);\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/services/ApprovalService.java",
            "content": "package cl.tingeso.mueblesstgo.services;\n\nimport cl.tingeso.mueblesstgo.entities.ApprovalEntity;\nimport cl.tingeso.mueblesstgo.entities.EmployeeEntity;\nimport cl.tingeso.mueblesstgo.repositories.ApprovalRepository;\nimport cl.tingeso.mueblesstgo.repositories.EmployeeRepository;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\n@Service\npublic class ApprovalService {\n\n    private final ApprovalRepository approvalRepository;\n    private final EmployeeRepository employeeRepository;\n\n    public ApprovalService(ApprovalRepository approvalRepository, EmployeeRepository employeeRepository) {\n        this.approvalRepository = approvalRepository;\n        this.employeeRepository = employeeRepository;\n    }\n\n    public ApprovalEntity saveApproval(ApprovalEntity approval, String rut) {\n        EmployeeEntity employee = this.employeeRepository.findByRut(rut)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"No se encontró sueldo\"));\n\n        approval.setEmployee(employee);\n        return  approvalRepository.save(approval);\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/services/ClockService.java",
            "content": "package cl.tingeso.mueblesstgo.services;\n\nimport cl.tingeso.mueblesstgo.entities.EmployeeEntity;\nimport cl.tingeso.mueblesstgo.entities.WorkedDayEntity;\nimport cl.tingeso.mueblesstgo.repositories.EmployeeRepository;\nimport cl.tingeso.mueblesstgo.repositories.WorkedDayRepository;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\n\nimport static java.time.temporal.ChronoUnit.MINUTES;\nimport java.util.HashMap;\nimport java.util.Objects;\n\n\n@Service\npublic class ClockService {\n    private final static DateTimeFormatter DF = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");\n    private final static DateTimeFormatter TF = DateTimeFormatter.ofPattern(\"HH:mm\");\n    private final static LocalTime ENTRY_TIME = LocalTime.parse(\"08:00\");\n    private final static LocalTime MAX_ENTRY_TIME_ACCEPTED = LocalTime.parse(\"09:10\");\n    private final static LocalTime MAX_REGULAR_WORKING_TIME = LocalTime.parse(\"18:00\");\n\n    private final WorkedDayRepository workedDayRepository;\n    private final EmployeeRepository employeeRepository;\n\n    public ClockService(WorkedDayRepository workedDayRepository, EmployeeRepository employeeRepository) {\n        this.workedDayRepository = workedDayRepository;\n        this.employeeRepository = employeeRepository;\n    }\n\n    public boolean loadClock(MultipartFile multipartFile) {\n\n        if (!multipartFile.isEmpty() && Objects.equals(multipartFile.getOriginalFilename(), \"DATA.txt\")) {\n\n            try {\n                HashMap<String, WorkedDayEntity> workedDaysByRut = new HashMap<>();\n\n                InputStream inputStream = multipartFile.getInputStream();\n                BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n\n                String line;\n                while ((line = br.readLine()) != null) {\n                    String[] mark = line.split(\";\");\n\n                    EmployeeEntity employee = employeeRepository.findByRut(mark[2])\n                            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"No se encontró empleado\"));\n\n                    if (Objects.nonNull(employee)) {\n                        String rut = mark[2];\n                        LocalDate date = LocalDate.parse(mark[0], DF);\n                        String key = rut + \"_\" + date.getDayOfMonth();\n                        LocalTime time = LocalTime.parse(mark[1], TF);\n\n                        if (!workedDaysByRut.containsKey(key))\n                            workedDaysByRut.put(key, new WorkedDayEntity());\n\n                        WorkedDayEntity workedDay = workedDaysByRut.get(key);\n                        workedDay.setEmployee(employee);\n                        workedDay.setDate(date);\n                        if (workedDay.getClockIn() == null) {\n                            workedDay.setClockIn(time);\n                        } else {\n                            if (time.compareTo(workedDay.getClockIn()) < 0) {\n                                LocalTime aux = workedDay.getClockIn();\n                                workedDay.setClockIn(time);\n                                workedDay.setClockOut(aux);\n                            } else {\n                                workedDay.setClockOut(time);\n                            }\n                        }\n                    }\n\n                    workedDaysByRut.values().stream()\n                            .filter(d -> d.getClockOut() != null)\n                            .filter(d -> d.getClockIn().compareTo(MAX_ENTRY_TIME_ACCEPTED) <= 0)\n                            .forEach(d -> {\n                                if (d.getClockOut().compareTo(MAX_REGULAR_WORKING_TIME) > 0) {\n                                    d.setOvertime(MINUTES.between(MAX_REGULAR_WORKING_TIME, d.getClockOut()) / 60.0);\n                                } else {\n                                    d.setOvertime(0.0);\n                                }\n\n                                if (d.getClockIn().compareTo(ENTRY_TIME) > 0) {\n                                    d.setMinutesLate(MINUTES.between(ENTRY_TIME, d.getClockIn()));\n                                } else {\n                                    d.setMinutesLate(0L);\n                                }\n\n                                workedDayRepository.save(d);\n                            });\n                }\n                br.close();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n            return true;\n        }\n        return false;\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/services/EmployeeService.java",
            "content": "package cl.tingeso.mueblesstgo.services;\n\nimport cl.tingeso.mueblesstgo.repositories.EmployeeRepository;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class EmployeeService {\n\n    private final EmployeeRepository employeeRepository;\n\n    public EmployeeService(EmployeeRepository employeeRepository) {\n        this.employeeRepository = employeeRepository;\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/services/HRMService.java",
            "content": "package cl.tingeso.mueblesstgo.services;\n\nimport cl.tingeso.mueblesstgo.entities.*;\nimport cl.tingeso.mueblesstgo.entities.enums.DetailType;\nimport cl.tingeso.mueblesstgo.repositories.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.Period;\nimport java.time.YearMonth;\nimport java.util.List;\n\n@Service\npublic class HRMService {\n\n    @Autowired\n    WageRepository wageRepository;\n    @Autowired\n    EmployeeRepository employeeRepository;\n    @Autowired\n    WorkingDaysRepository workingDaysRepository;\n    @Autowired\n    WageDetailRepository wageDetailRepository;\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //Descuento restrasos\n\n    // Calcula descuento según minutos de atraso.\n    // > 10: 1%, > 25: 3%, >= 45: 6%\n    public double lateDiscount(EmployeeEntity employee, YearMonth yearMonth) {\n\n        double lateDiscount = 0;\n        double totalLate = 0;\n\n        if (employee.getWorkedDays() != null) {\n\n            List<WorkedDayEntity> monthWorkedDays = employee.getWorkedDays().stream()\n                    .filter(wd -> wd.getDate().getMonth() == yearMonth.getMonth())\n                    .filter(wd -> wd.getDate().getYear() == yearMonth.getYear())\n                    .toList();\n\n            long fixedMonthlyWage = employee.getCategory().getFixedMonthlyWage();\n\n            for (WorkedDayEntity monthWorkedDay : monthWorkedDays) {\n                if (monthWorkedDay.getMinutesLate() > 10 &\n                        monthWorkedDay.getMinutesLate() <= 25) {\n                    totalLate = totalLate + 0.01;\n                } else if (monthWorkedDay.getMinutesLate() > 25 &\n                        monthWorkedDay.getMinutesLate() <= 45) {\n                    totalLate = totalLate + 0.03;\n                } else if (monthWorkedDay.getMinutesLate() > 45) {\n                    totalLate = totalLate + 0.06;\n                }\n            }\n\n            lateDiscount = totalLate * fixedMonthlyWage;\n\n        } else {\n            return lateDiscount;\n        }\n\n        return lateDiscount;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //Descuento inasistencias\n    public long totalAbsences(EmployeeEntity employee, int workingDays, YearMonth yearMonth) {\n\n        long attendances = employee.getWorkedDays().stream()\n                .filter(wd -> wd.getDate().getMonth() == yearMonth.getMonth())\n                .filter(wd -> wd.getDate().getYear() == yearMonth.getYear())\n                .count();\n\n        return workingDays - attendances;\n    }\n\n    // Calcula descuento según dias de inasistencia.\n    // 15% de sueldo base por cada día.\n    public double absenceDiscount(EmployeeEntity employee, long totalAbsences) {\n\n        return totalAbsences * (employee.getCategory().getFixedMonthlyWage() * 0.15 );\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //Bonificación horas extra\n    public double totalOvertime(EmployeeEntity employee, YearMonth yearMonth) {\n\n        double totalOvertime = 0;\n\n        if (employee.getWorkedDays() != null) {\n            totalOvertime = employee.getWorkedDays().stream()\n                    .filter(wd -> wd.getDate().getMonth() == yearMonth.getMonth())\n                    .filter(wd -> wd.getDate().getYear() == yearMonth.getYear())\n                    .mapToDouble(WorkedDayEntity::getOvertime).sum();\n        }\n\n        return totalOvertime;\n    }\n\n    // Calcula bonificacion según horas extra.\n    // 'A': 25000, 'B': 20000, 'C': 10000\n    public double overtimeBonus(EmployeeEntity employee, double totalOvertime) {\n\n        double overtimeBonus;\n\n        if (employee.getCategory().getType() == 'A') {\n            overtimeBonus = totalOvertime * 25000;\n        } else if (employee.getCategory().getType() == 'B') {\n            overtimeBonus = totalOvertime * 20000;\n        } else {\n            overtimeBonus = totalOvertime * 10000;\n        }\n\n        return overtimeBonus;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //Bonificación años de servicio\n    public long serviceYears(EmployeeEntity employee) {\n\n        LocalDate to = LocalDate.now();\n        Period period = Period.between(employee.getHireDate(), to);\n\n        return period.getYears() + (period.getMonths() / 12) + (period.getDays() / 365);\n    }\n\n    // Calcula bonificacion según tiempo de servicio.\n    // < 5: 0%, >= 5: 5%, >= 10: 8%, >= 15: 11%, >= 20: 14% >= 25: 17%\n    public double serviceYearsBonus(EmployeeEntity employee, Long serviceYears) {\n\n        double serviceYearsBonus = 0;\n\n        if (serviceYears >= 5 && serviceYears < 10) {\n            serviceYearsBonus = employee.getCategory().getFixedMonthlyWage() * 0.05;\n        } else if (serviceYears >= 10 && serviceYears < 15) {\n            serviceYearsBonus = employee.getCategory().getFixedMonthlyWage() * 0.08;\n        } else if (serviceYears >= 15 && serviceYears < 20) {\n            serviceYearsBonus = employee.getCategory().getFixedMonthlyWage() * 0.11;\n        } else if (serviceYears >= 20 && serviceYears < 25) {\n            serviceYearsBonus = employee.getCategory().getFixedMonthlyWage() * 0.14;\n        } else if (serviceYears >= 25) {\n            serviceYearsBonus = employee.getCategory().getFixedMonthlyWage() * 0.17;\n        }\n\n        return serviceYearsBonus;\n    }\n\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //SUELDO\n    public void createWage(EmployeeEntity employee) {\n\n        List<WorkedDayEntity> workedDays = employee.getWorkedDays();\n        YearMonth yearMonth = YearMonth.from(workedDays.get(workedDays.size() - 1).getDate());\n        WageEntity newWage = new WageEntity();\n\n        if (employee.getWorkedDays() != null) {\n            newWage.setDate(LocalDate.now());\n            newWage.setEmployee(employee);\n            this.wageRepository.save(newWage);\n\n            //SUELDO FIJO\n            WageDetailEntity fixedMonthlyWage = new WageDetailEntity();\n            fixedMonthlyWage.setName(\"FMW\");\n            fixedMonthlyWage.setWage(newWage);\n            fixedMonthlyWage.setType(DetailType.POSITIVE_NI);\n            fixedMonthlyWage.setAmount(BigDecimal.valueOf(employee.getCategory().getFixedMonthlyWage()));\n            this.wageDetailRepository.save(fixedMonthlyWage);\n\n            //BONO AñOS DE SERVICIO\n            WageDetailEntity serviceYearsBonus = new WageDetailEntity();\n            serviceYearsBonus.setName(\"SY-B\");\n            serviceYearsBonus.setWage(newWage);\n            serviceYearsBonus.setType(DetailType.POSITIVE_NI);\n\n            serviceYearsBonus.setAmount(BigDecimal.valueOf(\n                    serviceYearsBonus(employee, serviceYears(employee))));\n\n            this.wageDetailRepository.save(serviceYearsBonus);\n\n            //BONO HORAS EXTRAS\n            WageDetailEntity overtimeBonus = new WageDetailEntity();\n            overtimeBonus.setName(\"OT-B\");\n            overtimeBonus.setWage(newWage);\n            overtimeBonus.setType(DetailType.POSITIVE_NI);\n            if (employee.getOvertimeApproval().stream()\n                    .filter(a -> workedDays.get(workedDays.size() - 1).getDate().getMonth().equals(a.getApprovalDate().getMonth()))\n                    .findAny()\n                    .orElse(null) != null ) {\n\n                overtimeBonus.setAmount(BigDecimal.valueOf(\n                        overtimeBonus(employee, totalOvertime(employee, yearMonth))));\n\n            } else { overtimeBonus.setAmount(BigDecimal.valueOf(0)); }\n            this.wageDetailRepository.save(overtimeBonus);\n\n            //DESCUENTO ATRASOS\n            WageDetailEntity lateDiscount = new WageDetailEntity();\n            lateDiscount.setName(\"L-D\");\n            lateDiscount.setWage(newWage);\n            lateDiscount.setType(DetailType.NEGATIVE_NI);\n\n            lateDiscount.setAmount(BigDecimal.valueOf(lateDiscount(employee, yearMonth)));\n\n            this.wageDetailRepository.save(lateDiscount);\n\n            //DESCUENTO INASISTENCIAS\n            WageDetailEntity absenceDiscount = new WageDetailEntity();\n            absenceDiscount.setName(\"A-D\");\n            absenceDiscount.setWage(newWage);\n            absenceDiscount.setType(DetailType.NEGATIVE_NI);\n            if (employee.getAbsenceJustification().stream()\n                    .filter(j -> workedDays.get(workedDays.size() - 1).getDate().getMonth().equals(j.getJustificationDate().getMonth()))\n                    .filter(j -> j.getStatus().equals(Boolean.TRUE))\n                    .findAny()\n                    .orElse(null) == null ) {\n\n                WorkingDaysEntity days = workingDaysRepository.findByMonth((newWage.getDate().getMonth().getValue()));\n\n                absenceDiscount.setAmount(BigDecimal.valueOf(\n                        absenceDiscount(employee, totalAbsences(employee, days.getAmount(), yearMonth))));\n\n            } else { absenceDiscount.setAmount(BigDecimal.valueOf(0)); }\n            this.wageDetailRepository.save(absenceDiscount);\n\n            //SUELDO BRUTO\n            WageDetailEntity grossWage = new WageDetailEntity();\n            grossWage.setName(\"GW\");\n            grossWage.setWage(newWage);\n            grossWage.setType(DetailType.POSITIVE_I);\n            BigDecimal bonus = fixedMonthlyWage.getAmount().add(serviceYearsBonus.getAmount());\n            BigDecimal discount = ( overtimeBonus.getAmount().add(lateDiscount.getAmount()) ).add(absenceDiscount.getAmount());\n            grossWage.setAmount(bonus.subtract(discount));\n            this.wageDetailRepository.save(grossWage);\n\n            //DESCUENTO PENSION\n            WageDetailEntity pensionContribution = new WageDetailEntity();\n            pensionContribution.setName(\"PC\");\n            pensionContribution.setWage(newWage);\n            pensionContribution.setType(DetailType.NEGATIVE_I);\n            pensionContribution.setAmount(grossWage.getAmount().multiply(BigDecimal.valueOf(0.1)));\n            this.wageDetailRepository.save(pensionContribution);\n\n            //DESCUENTO PLAN DE SALUD\n            WageDetailEntity healthContribution = new WageDetailEntity();\n            healthContribution.setName(\"HC\");\n            healthContribution.setWage(newWage);\n            healthContribution.setType(DetailType.NEGATIVE_I);\n            healthContribution.setAmount(grossWage.getAmount().multiply(BigDecimal.valueOf(0.08)));\n            this.wageDetailRepository.save(healthContribution);\n\n            //SUELDO LIQUIDO\n            WageDetailEntity net_pay = new WageDetailEntity();\n            net_pay.setName(\"NP\");\n            net_pay.setWage(newWage);\n            net_pay.setType(DetailType.POSITIVE_I);\n            net_pay.setAmount(grossWage.getAmount().subtract(pensionContribution.getAmount().add(healthContribution.getAmount())));\n            this.wageDetailRepository.save(net_pay);\n        }\n    }\n\n    public void generateWages() {\n\n        try {\n            this.employeeRepository.findAll().forEach(this::createWage);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/services/JustificationService.java",
            "content": "package cl.tingeso.mueblesstgo.services;\n\nimport cl.tingeso.mueblesstgo.entities.JustificationEntity;\nimport cl.tingeso.mueblesstgo.entities.EmployeeEntity;\nimport cl.tingeso.mueblesstgo.repositories.JustificationRepository;\nimport cl.tingeso.mueblesstgo.repositories.EmployeeRepository;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\n\n@Service\npublic class JustificationService {\n\n    private final JustificationRepository justificationRepository;\n    private final EmployeeRepository employeeRepository;\n\n    public JustificationService(JustificationRepository justificationRepository, EmployeeRepository employeeRepository) {\n        this.justificationRepository = justificationRepository;\n        this.employeeRepository = employeeRepository;\n    }\n\n    public JustificationEntity saveJustification(JustificationEntity justification, String rut) {\n        EmployeeEntity employee = this.employeeRepository.findByRut(rut)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"No se encontró sueldo\"));\n\n        justification.setEmployee(employee);\n        justification.setStatus(Boolean.FALSE);\n        return  justificationRepository.save(justification);\n    }\n}\n"
        },
        {
            "path": "src/main/java/cl/tingeso/mueblesstgo/services/WageService.java",
            "content": "package cl.tingeso.mueblesstgo.services;\n\nimport cl.tingeso.mueblesstgo.entities.*;\nimport cl.tingeso.mueblesstgo.repositories.*;\nimport cl.tingeso.mueblesstgo.controllers.model.EmployeeVo;\nimport cl.tingeso.mueblesstgo.controllers.model.WageDetailVo;\nimport cl.tingeso.mueblesstgo.controllers.model.WageVo;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.time.YearMonth;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class WageService {\n\n    private final HRMService hrmService;\n    private final WageRepository wageRepository;\n    private final EmployeeRepository employeeRepository;\n\n    public WageService(HRMService hrmService, WageRepository wageRepository, EmployeeRepository employeeRepository) {\n        this.hrmService = hrmService;\n        this.wageRepository = wageRepository;\n        this.employeeRepository = employeeRepository;\n    }\n\n    public WageVo getById(Long id, boolean withEmployee) {\n\n        WageEntity wage = this.wageRepository.findById(id)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"No se encontró sueldo\"));\n        \n        WageVo vo = new WageVo();\n        vo.setId(wage.getId());\n        vo.setDate(wage.getDate());\n        vo.setDetail(wage.getDetail().stream().map(wd->{\n            WageDetailVo detailVo = new WageDetailVo();\n            detailVo.setId(wd.getId());\n            detailVo.setName(wd.getName());\n            detailVo.setType(wd.getType());\n            detailVo.setAmount(wd.getAmount());\n            return detailVo;\n        }).collect(Collectors.toList()));\n        if (withEmployee) {\n            EmployeeVo employeeVo = new EmployeeVo();\n            employeeVo.setId(wage.getEmployee().getId());\n            employeeVo.setName(wage.getEmployee().getFirstNames() + \" \" + wage.getEmployee().getLastNames());\n            employeeVo.setRut(wage.getEmployee().getRut());\n            employeeVo.setCategory(wage.getEmployee().getCategory().getType());\n            employeeVo.setServiceYears((int) hrmService.serviceYears(wage.getEmployee()));\n            vo.setEmployee(employeeVo);\n        }\n        return vo;\n    }\n\n    public List<WageVo> getWages(){\n        List<WageEntity> wages = wageRepository.findAll();\n\n        List<WageVo> wagesVo = new ArrayList<>();\n\n        for (WageEntity wage : wages) {\n            WageVo vo = new WageVo();\n            vo.setId(wage.getId());\n            vo.setDate(wage.getDate());\n            vo.setDetail(wage.getDetail().stream().map(wd -> {\n                WageDetailVo detailVo = new WageDetailVo();\n                detailVo.setId(wd.getId());\n                detailVo.setName(wd.getName());\n                detailVo.setType(wd.getType());\n                detailVo.setAmount(wd.getAmount());\n                return detailVo;\n            }).collect(Collectors.toList()));\n\n            EmployeeVo employeeVo = new EmployeeVo();\n            employeeVo.setId(wage.getEmployee().getId());\n            employeeVo.setName(wage.getEmployee().getFirstNames() + \" \" + wage.getEmployee().getLastNames());\n            employeeVo.setRut(wage.getEmployee().getRut());\n            employeeVo.setCategory(wage.getEmployee().getCategory().getType());\n            employeeVo.setServiceYears((int) hrmService.serviceYears(wage.getEmployee()));\n            vo.setEmployee(employeeVo);\n\n            wagesVo.add(vo);\n        }\n\n        return wagesVo;\n    }\n\n\n    public Long findByEmployeeIdAndDate(String employeeRut, String month) {\n        try {\n            YearMonth yearMonth = YearMonth.parse(month);\n            Long employeeId = this.employeeRepository.findByRut(employeeRut).orElseThrow().getId();\n            return this.wageRepository.findAll().stream()\n                    .filter(w -> w.getDate().getMonth() == yearMonth.getMonth())\n                    .filter(w -> w.getDate().getYear() == yearMonth.getYear())\n                    .filter(w -> w.getEmployee().getId().equals(employeeId))\n                    .findFirst().orElseThrow().getId();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n"
        }
    ]
}